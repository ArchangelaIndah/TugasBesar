Index: app/src/main/java/com/example/tubes/api/ProfilApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.tubes.api\r\n\r\nclass ProfilApi {\r\n    companion object{\r\n        val BASE_URL =\"http://192.168.0.108:8080/profil-apiserver/public/\"\r\n\r\n        val GET_ALL_URL = BASE_URL + \"profil\"\r\n        val GET_BY_ID_URL = BASE_URL + \"profil/\"\r\n        val ADD_URL = BASE_URL + \"profil\"\r\n        val UPDATE_URL = BASE_URL + \"profil/\"\r\n        val DELETE_URL = BASE_URL + \"profil/\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/tubes/api/ProfilApi.kt b/app/src/main/java/com/example/tubes/api/ProfilApi.kt
--- a/app/src/main/java/com/example/tubes/api/ProfilApi.kt	(revision 0c7932cc318a0065429561febc2a5011deace1f5)
+++ b/app/src/main/java/com/example/tubes/api/ProfilApi.kt	(date 1671189776995)
@@ -2,7 +2,7 @@
 
 class ProfilApi {
     companion object{
-        val BASE_URL ="http://192.168.0.108:8080/profil-apiserver/public/"
+        val BASE_URL ="http://192.168.1.3:8082/profil-apiserver/public/"
 
         val GET_ALL_URL = BASE_URL + "profil"
         val GET_BY_ID_URL = BASE_URL + "profil/"
Index: app/src/main/java/com/example/tubes/Register.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.tubes\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.Color\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.core.app.NotificationCompat\r\nimport androidx.core.app.NotificationManagerCompat\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.RequestQueue\r\nimport com.android.volley.Response\r\nimport com.android.volley.toolbox.StringRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.example.tubes.api.ProfilApi\r\nimport com.example.tubes.databinding.ActivityRegisterBinding\r\nimport com.example.tubes.models.Profil\r\nimport com.example.tubes.room.User\r\nimport com.example.tubes.room.UserDB\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport com.google.android.material.textfield.TextInputLayout\r\nimport com.google.gson.Gson\r\nimport com.shashank.sony.fancytoastlib.FancyToast\r\nimport kotlinx.android.synthetic.main.activity_register.*\r\nimport org.json.JSONObject\r\nimport java.nio.charset.StandardCharsets\r\n\r\nclass Register : AppCompatActivity() {\r\n    private val notificationId = 101\r\n    private val CHANNEL_ID = \"channel_notification\"\r\n\r\n    private lateinit var inputUsername: TextInputLayout\r\n    private lateinit var inputPassword: TextInputLayout\r\n    private lateinit var inputEmail: TextInputLayout\r\n    private lateinit var inputTanggalLahir: TextInputLayout\r\n    private lateinit var inputNomorTelepon: TextInputLayout\r\n    private lateinit var mainLayout: ConstraintLayout\r\n    private lateinit var binding : ActivityRegisterBinding\r\n\r\n    private var queue: RequestQueue? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        val db by lazy { UserDB(this) }\r\n        getSupportActionBar()?.hide()\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n        queue = Volley.newRequestQueue(this)\r\n        var akses= true\r\n\r\n        binding.btnMasuk.setOnClickListener{\r\n            val moveLogin = Intent(this@Register, MainActivity::class.java)\r\n\r\n            startActivity(moveLogin)\r\n        }\r\n\r\n        binding.btnDaftar.setOnClickListener(View.OnClickListener {\r\n\r\n            val username: String = binding.inputLayoutUsername.getEditText()?.getText().toString()\r\n            val password: String = binding.inputLayoutPassword.getEditText()?.getText().toString()\r\n            val email: String = binding.inputLayoutEmail.getEditText()?.getText().toString()\r\n            val tanggalLahir: String = binding.inputLayoutTanggalLahir.getEditText()?.getText().toString()\r\n            val nomorTelepon: String = binding.inputLayoutNomorTelepon.getEditText()?.getText().toString()\r\n\r\n            val intent = Intent (this, MainActivity::class.java)\r\n            val mBundle = Bundle()\r\n\r\n//            if(username.isEmpty()) {\r\n//                binding.inputLayoutUsername.setError(\"Username must be filled with text\")\r\n//                akses=false\r\n//            }\r\n//\r\n//            if(password.isEmpty()) {\r\n//                binding.inputLayoutPassword.setError(\"Password must be filled with text\")\r\n//                akses=false\r\n//            }\r\n//\r\n//            if(email.isEmpty()) {\r\n//                binding.inputLayoutEmail.setError(\"Email must be filled with text\")\r\n//                akses=false\r\n//            }\r\n//\r\n//            if(tanggalLahir.isEmpty()) {\r\n//                binding.inputLayoutTanggalLahir.setError(\"Tanggal Lahir must be filled with text\")\r\n//                akses=false\r\n//            }\r\n//\r\n//            if(nomorTelepon.isEmpty()) {\r\n//                binding.inputLayoutNomorTelepon.setError(\"No Telepon must be filled with text\")\r\n//                akses=false\r\n//            }\r\n//\r\n//            if(binding.inputLayoutUsername.getEditText()?.getText()==null){\r\n//                binding.inputLayoutUsername.getEditText()?.setText(\"\")\r\n//            }\r\n//\r\n//            if(binding.inputLayoutPassword.getEditText()?.getText()==null){\r\n//                binding.inputLayoutPassword.getEditText()?.setText(\"\")\r\n//            }\r\n            binding.inputLayoutUsername.error = null\r\n            binding.inputLayoutPassword.error = null\r\n            binding.inputLayoutEmail.error = null\r\n            binding.inputLayoutTanggalLahir.error = null\r\n            binding.inputLayoutNomorTelepon.error = null\r\n\r\n            val stringRequest: StringRequest =\r\n                    object: StringRequest(Method.POST, ProfilApi.ADD_URL, Response.Listener { response->\r\n                        val gson = Gson()\r\n                        val profil = gson.fromJson(response, Profil::class.java)\r\n\r\n                        if(profil!=null)\r\n                            FancyToast.makeText(this@Register, \"Data Berhasil Ditambahkan\",FancyToast.LENGTH_LONG,FancyToast.SUCCESS,true).show()\r\n\r\n                        val moveHome = Intent(this@Register, MainActivity::class.java)\r\n\r\n                        mBundle.putString(\"Username\",binding.inputLayoutUsername.getEditText()?.getText().toString())\r\n                        mBundle.putString(\"Password\",binding.inputLayoutPassword.getEditText()?.getText().toString())\r\n                        moveHome.putExtra(\"register\", mBundle)\r\n                        createNotificationChannel()\r\n                        sendNotification()\r\n\r\n                        FancyToast.makeText(applicationContext, \"Berhasil Diregistrasi!!!\",FancyToast.LENGTH_LONG,FancyToast.SUCCESS,true).show()\r\n                        startActivity(moveHome)\r\n\r\n                        val returnIntent = Intent()\r\n                        setResult(RESULT_OK, returnIntent)\r\n                        finish()\r\n\r\n//                        setLoading(false)\r\n                    }, Response.ErrorListener { error->\r\n\r\n                        try{\r\n                            val responseBody = String(error.networkResponse.data, StandardCharsets.UTF_8)\r\n                            if(error.networkResponse.statusCode == 404){\r\n                                val gson = Gson()\r\n                                val jsonObject = JSONObject(responseBody)\r\n                                val jsonObject1 = jsonObject.getJSONObject(\"message\")\r\n                                for(i in jsonObject1.keys()){\r\n                                    if(i == \"username\"){\r\n                                        if (jsonObject1[i] != \"\"){\r\n                                            binding.inputLayoutUsername.setError(\"Username must be filled with text\")\r\n                                        }\r\n                                    }\r\n\r\n                                    if (i == \"password\"){\r\n                                        if (jsonObject1[i] != \"\"){\r\n                                            binding.inputLayoutPassword.setError(\"Password must be filled with text\")\r\n                                        }\r\n                                    }\r\n\r\n                                    if (i == \"email\"){\r\n                                        if (jsonObject1[i] != \"\") {\r\n                                            binding.inputLayoutEmail.setError(\"Email must be filled with text\")\r\n                                        }\r\n                                    }\r\n\r\n                                    if (i == \"tanggallhr\"){\r\n                                        if (jsonObject1[i] != \"\"){\r\n                                            binding.inputLayoutTanggalLahir.setError(\"Tanggal lahir must be filled with text\")\r\n                                        }\r\n                                    }\r\n\r\n                                    if (i == \"notelepon\"){\r\n                                        if (jsonObject1[i] != \"\"){\r\n                                            binding.inputLayoutNomorTelepon.setError(\"No telepon must be filled with text\")\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }else {\r\n                                val errors = JSONObject(responseBody)\r\n                                FancyToast.makeText(this@Register,\r\n                                    errors.getString(\"message\"),\r\n                                    FancyToast.LENGTH_LONG,FancyToast.ERROR,true).show()\r\n                            }\r\n                        }catch (e:Exception){\r\n                            FancyToast.makeText(this@Register, e.message,FancyToast.LENGTH_LONG,FancyToast.INFO,true).show()\r\n                        }\r\n                    })\r\n                    {\r\n                        @Throws(AuthFailureError::class)\r\n                        override fun getHeaders(): MutableMap<String, String> {\r\n                            val headers = HashMap<String, String>()\r\n                            headers[\"Accept\"] = \"application/json\"\r\n                            return headers\r\n                        }\r\n                        override fun getParams(): Map<String, String> {\r\n                            val params = HashMap<String, String>()\r\n                            params[\"username\"] = binding.inputLayoutUsername.getEditText()?.getText().toString()\r\n                            params[\"password\"] = binding.inputLayoutPassword.getEditText()?.getText().toString()\r\n                            params[\"email\"] = binding.inputLayoutEmail.getEditText()?.getText().toString()\r\n                            params[\"tanggallhr\"] = binding.inputLayoutTanggalLahir.getEditText()?.getText().toString()\r\n                            params[\"notelepon\"] = binding.inputLayoutNomorTelepon.getEditText()?.getText().toString()\r\n                            return params\r\n                        }\r\n\r\n                    }\r\n                queue!!.add(stringRequest)\r\n\r\n        })\r\n    }\r\n\r\n    private fun createNotificationChannel(){\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){\r\n            val name = \"Notification Title\"\r\n            val descriptionText = \"Notification Description\"\r\n\r\n            val channel1 = NotificationChannel(CHANNEL_ID, name, NotificationManager.IMPORTANCE_DEFAULT).apply{\r\n                description = descriptionText\r\n            }\r\n\r\n            val notificationManager: NotificationManager =\r\n                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n            notificationManager.createNotificationChannel(channel1)\r\n        }\r\n    }\r\n\r\n    private fun sendNotification(){\r\n        val intent: Intent = Intent(this, MainActivity::class.java).apply{\r\n            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n        }\r\n        val pendingIntent: PendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\r\n\r\n        val broadcastIntent: Intent = Intent(this, NotificationReceiver::class.java)\r\n        broadcastIntent.putExtra(\"toastMessage\", \"Login first to access menu\")\r\n        val actionIntent = PendingIntent.getBroadcast(this, 0, broadcastIntent, PendingIntent.FLAG_UPDATE_CURRENT)\r\n        val largeIcon = BitmapFactory.decodeResource(resources, R.drawable.logo)\r\n        val bigPictureStyle = NotificationCompat.BigPictureStyle()\r\n            .bigPicture(largeIcon)\r\n        val builder = NotificationCompat.Builder(this, CHANNEL_ID)\r\n            .setSmallIcon(R.drawable.logo)\r\n            .setStyle(bigPictureStyle)\r\n            .setContentTitle(\"Register Success\")\r\n            .setContentText(\"Thankyou for registering at Bengkelaz\")\r\n            .setCategory(NotificationCompat.CATEGORY_MESSAGE)\r\n            .setColor(Color.GREEN)\r\n            .setAutoCancel(true)\r\n            .setOnlyAlertOnce(true)\r\n            .setContentIntent(pendingIntent)\r\n            .addAction(R.mipmap.ic_launcher, \"Access Menu\", actionIntent)\r\n            .setPriority(NotificationCompat.PRIORITY_DEFAULT)\r\n\r\n        //Toast.makeText(applicationContext, \"Register with your new Account first\", Toast.LENGTH_SHORT).show()\r\n        FancyToast.makeText(applicationContext, \"Register with your new Account first\", FancyToast.LENGTH_LONG, FancyToast.SUCCESS,true).show()\r\n        with(NotificationManagerCompat.from(this)){\r\n            notify(notificationId, builder.build())\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/tubes/Register.kt b/app/src/main/java/com/example/tubes/Register.kt
--- a/app/src/main/java/com/example/tubes/Register.kt	(revision 0c7932cc318a0065429561febc2a5011deace1f5)
+++ b/app/src/main/java/com/example/tubes/Register.kt	(date 1671189777144)
@@ -76,38 +76,6 @@
             val intent = Intent (this, MainActivity::class.java)
             val mBundle = Bundle()
 
-//            if(username.isEmpty()) {
-//                binding.inputLayoutUsername.setError("Username must be filled with text")
-//                akses=false
-//            }
-//
-//            if(password.isEmpty()) {
-//                binding.inputLayoutPassword.setError("Password must be filled with text")
-//                akses=false
-//            }
-//
-//            if(email.isEmpty()) {
-//                binding.inputLayoutEmail.setError("Email must be filled with text")
-//                akses=false
-//            }
-//
-//            if(tanggalLahir.isEmpty()) {
-//                binding.inputLayoutTanggalLahir.setError("Tanggal Lahir must be filled with text")
-//                akses=false
-//            }
-//
-//            if(nomorTelepon.isEmpty()) {
-//                binding.inputLayoutNomorTelepon.setError("No Telepon must be filled with text")
-//                akses=false
-//            }
-//
-//            if(binding.inputLayoutUsername.getEditText()?.getText()==null){
-//                binding.inputLayoutUsername.getEditText()?.setText("")
-//            }
-//
-//            if(binding.inputLayoutPassword.getEditText()?.getText()==null){
-//                binding.inputLayoutPassword.getEditText()?.setText("")
-//            }
             binding.inputLayoutUsername.error = null
             binding.inputLayoutPassword.error = null
             binding.inputLayoutEmail.error = null
